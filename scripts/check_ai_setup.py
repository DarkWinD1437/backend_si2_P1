#!/usr/bin/env python3
"""
Script para verificar configuraci√≥n de IA y probar integraci√≥n con Grok
"""
import os
import sys
import django

# Configurar Django
sys.path.insert(0, os.path.dirname(__file__))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from backend.apps.modulo_ia.facial_recognition import FacialRecognitionService
from backend.apps.modulo_ia.views import grok_client
from PIL import Image
import numpy as np

def check_grok_configuration():
    """Verificar si Grok API est√° configurado"""
    print("=== VERIFICACI√ìN DE CONFIGURACI√ìN DE GROK API ===")

    if grok_client:
        print("‚úÖ Cliente de Grok inicializado correctamente")
        print(f"üìç Base URL: {grok_client.base_url}")
        print(f"üîë API Key configurada: {'S√≠' if hasattr(grok_client, '_api_key') and grok_client._api_key else 'No'}")

        # Verificar variables de entorno
        grok_api_key = os.environ.get('GROK_API_KEY', '')
        print(f"üîê Variable de entorno GROK_API_KEY: {'Configurada' if grok_api_key else 'NO CONFIGURADA'}")

        return True
    else:
        print("‚ùå Cliente de Grok NO inicializado")
        print("üí° Posibles causas:")
        print("   - Variable de entorno GROK_API_KEY no configurada")
        print("   - Error en la inicializaci√≥n del cliente")
        return False

def test_grok_connection():
    """Probar conexi√≥n b√°sica con Grok API"""
    print("\n=== PRUEBA DE CONEXI√ìN CON GROK API ===")

    if not grok_client:
        print("‚ùå No hay cliente de Grok disponible")
        return False

    try:
        # Prueba simple de texto
        response = grok_client.chat.completions.create(
            model="x-ai/grok-4-fast:free",
            messages=[
                {
                    "role": "user",
                    "content": "Hola, ¬øpuedes confirmar que est√°s funcionando? Responde solo 'S√≠, estoy funcionando correctamente.'"
                }
            ],
            max_tokens=50
        )

        respuesta = response.choices[0].message.content.strip()
        print(f"üì® Respuesta de Grok: {respuesta}")

        if "funcionando" in respuesta.lower():
            print("‚úÖ Conexi√≥n con Grok API exitosa")
            return True
        else:
            print("‚ö†Ô∏è Respuesta inesperada de Grok")
            return False

    except Exception as e:
        print(f"‚ùå Error conectando con Grok API: {e}")
        return False

def test_grok_vision():
    """Probar capacidades de visi√≥n de Grok"""
    print("\n=== PRUEBA DE VISI√ìN CON GROK ===")

    if not grok_client:
        print("‚ùå IA no disponible, saltando prueba")
        return False

    try:
        # Prueba de visi√≥n con imagen de prueba
        test_image_url = "https://picsum.photos/200/200?random=1"
        vision_response = grok_client.chat.completions.create(
            model="x-ai/grok-4-fast:free",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": "Describe brevemente qu√© ves en esta imagen. Responde en espa√±ol."
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": test_image_url
                            }
                        }
                    ]
                }
            ],
            max_tokens=100
        )

        respuesta = vision_response.choices[0].message.content.strip()
        print(f"üëÅÔ∏è Respuesta de visi√≥n: {respuesta}")
        print("‚úÖ Grok puede procesar im√°genes correctamente")
        return True

    except Exception as e:
        print(f"‚ùå Error en prueba de visi√≥n: {e}")
        return False

def test_face_analysis_with_ai():
    """Probar an√°lisis facial con IA"""
    print("\n=== PRUEBA DE AN√ÅLISIS FACIAL CON IA ===")

    if not grok_client:
        print("‚ùå IA no disponible, saltando prueba")
        return False

    try:
        # Crear una imagen de prueba simple
        img = Image.new('RGB', (200, 200), color=(200, 180, 200))
        image_array = np.array(img)

        print("üñºÔ∏è Probando an√°lisis facial con IA...")
        result = FacialRecognitionService.extract_face_embedding_with_ai(image_array, grok_client)

        print("‚úÖ An√°lisis completado:")
        print(f"   üìä Dimensiones del embedding: {len(result['embedding'])}")
        print(f"   üéØ Confianza: {result['confidence']}")
        print(f"   ü§ñ Modelo usado: {result['model']}")
        print(f"   üìù Descripci√≥n: {result.get('description', 'N/A')}")

        return True

    except Exception as e:
        print(f"‚ùå Error en an√°lisis facial con IA: {e}")
        return False

def show_ai_setup_instructions():
    """Mostrar instrucciones para configurar la API key"""
    print("\n=== INSTRUCCIONES PARA CONFIGURAR API KEY ===")
    print("Para usar IA real en el reconocimiento facial, necesitas:")
    print()
    print("1Ô∏è‚É£ OBTENER API KEY DE OPENROUTER:")
    print("   üìç Ve a: https://openrouter.ai/")
    print("   üìù Reg√≠strate y obt√©n tu API key")
    print()
    print("2Ô∏è‚É£ CONFIGURAR VARIABLE DE ENTORNO:")
    print("   üíª En Windows PowerShell:")
    print("   $env:GROK_API_KEY='tu_api_key_aqui'")
    print("   ")
    print("   üíª Para configuraci√≥n permanente, crea un archivo .env:")
    print("   GROK_API_KEY=tu_api_key_aqui")
    print()
    print("3Ô∏è‚É£ MODELOS DISPONIBLES PARA VISI√ìN:")
    print("   ‚Ä¢ x-ai/grok-4-fast:free (recomendado - gratuito)")
    print("   ‚Ä¢ anthropic/claude-3-haiku:beta")
    print("   ‚Ä¢ anthropic/claude-3-sonnet:beta")
    print("   ‚Ä¢ openai/gpt-4o")
    print("   ‚Ä¢ google/gemini-pro-vision")
    print()
    print("4Ô∏è‚É£ COSTOS APROXIMADOS:")
    print("   ‚Ä¢ Grok 4 Fast Free: GRATUITO")
    print("   ‚Ä¢ Claude 3 Haiku: ~$0.00025 por imagen")
    print("   ‚Ä¢ GPT-4 Vision: ~$0.001 por imagen")
    print("   ‚Ä¢ Gemini Pro Vision: ~$0.0001 por imagen")
    print()
    print("5Ô∏è‚É£ PRUEBA LA CONFIGURACI√ìN:")
    print("   python check_ai_setup.py")

def show_face_recognition_requirements():
    """Mostrar requisitos para instalar face_recognition"""
    print("\n=== REQUISITOS PARA FACE_RECOGNITION ===")
    print("Para instalar face_recognition necesitar√°s:")
    print()
    print("1Ô∏è‚É£ DEPENDENCIAS DEL SISTEMA (Windows):")
    print("   - Visual Studio Build Tools (C++ compiler)")
    print("   - CMake")
    print("   - Git")
    print()
    print("2Ô∏è‚É£ INSTALACI√ìN DE DEPENDENCIAS PYTHON:")
    print("   pip install dlib")
    print("   pip install face_recognition")
    print()
    print("3Ô∏è‚É£ COMANDOS DE INSTALACI√ìN:")
    print("   # Instalar dlib (puede tomar tiempo)")
    print("   pip install dlib")
    print("   ")
    print("   # Instalar face_recognition")
    print("   pip install face_recognition")
    print()
    print("4Ô∏è‚É£ ALTERNATIVAS M√ÅS F√ÅCILES:")
    print("   - Usar Docker con imagen pre-compilada")
    print("   - Usar Google Colab o servicios en la nube")
    print("   - Usar la IA integrada (Grok) que ya tienes configurada")
    print()
    print("5Ô∏è‚É£ INTEGRACI√ìN EN EL C√ìDIGO:")
    print("   Una vez instalado, puedes reemplazar el m√©todo actual:")
    print("   # En facial_recognition.py")
    print("   import face_recognition")
    print("   ")
    print("   # En extract_face_embedding():")
    print("   face_locations = face_recognition.face_locations(image_array)")
    print("   face_encodings = face_recognition.face_encodings(image_array, face_locations)")
    print("   if face_encodings:")
    print("       return {'embedding': face_encodings[0].tolist(), ...}")

def main():
    print("ü§ñ VERIFICACI√ìN DE CONFIGURACI√ìN DE IA Y FACE_RECOGNITION\n")

    # Verificar configuraci√≥n de Grok
    grok_ok = check_grok_configuration()

    if grok_ok:
        # Probar conexi√≥n
        connection_ok = test_grok_connection()

        if connection_ok:
            # Probar visi√≥n
            test_grok_vision()

            # Probar an√°lisis facial
            test_face_analysis_with_ai()

    # Mostrar instrucciones para configurar IA
    show_ai_setup_instructions()

    # Mostrar requisitos para face_recognition
    show_face_recognition_requirements()

    print("\n" + "="*60)
    print("üìã RESUMEN:")
    if grok_ok:
        print("‚úÖ Tu API de IA est√° configurada y lista para usar")
        print("‚úÖ El sistema puede usar IA real para reconocimiento facial")
        print("‚úÖ C√≥digo actualizado para usar Grok 4 Fast Free (gratuito)")
    else:
        print("‚ùå API de IA no configurada - usando m√©todos tradicionales")
        print("üí° Sigue las instrucciones arriba para activar IA real")

    print("\nüéØ RECOMENDACIONES:")
    print("1Ô∏è‚É£ Configura tu API key de OpenRouter para usar IA real")
    print("2Ô∏è‚É£ Prueba con: python check_ai_setup.py")
    print("3Ô∏è‚É£ Si no quieres configurar API, el sistema funciona con l√≥gica computacional")
    print("4Ô∏è‚É£ Face_recognition requiere instalaci√≥n compleja - no recomendado")

if __name__ == '__main__':
    main()