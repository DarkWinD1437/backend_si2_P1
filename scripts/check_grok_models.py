#!/usr/bin/env python3
"""
Script para verificar modelos disponibles en OpenRouter
"""
import os
import sys
import django

# Configurar Django
sys.path.insert(0, os.path.dirname(__file__))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from openai import OpenAI

def check_available_models():
    """Verificar modelos disponibles en OpenRouter"""
    print("üîç VERIFICANDO MODELOS DISPONIBLES EN OPENROUTER\n")

    # Simular API key para listar modelos
    client = OpenAI(
        api_key="sk-or-v1-simulated-key-for-listing",
        base_url="https://openrouter.ai/api/v1"
    )

    try:
        # Intentar listar modelos
        response = client.models.list()
        print("‚úÖ Modelos disponibles:")

        grok_models = []
        vision_models = []

        for model in response.data:
            model_id = model.id.lower()

            # Buscar modelos de Grok
            if 'grok' in model_id:
                grok_models.append(model.id)

            # Buscar modelos con capacidades de visi√≥n
            if hasattr(model, 'description') and model.description:
                desc = model.description.lower()
                if 'vision' in desc or 'image' in desc or 'visual' in desc:
                    vision_models.append(model.id)

        print(f"\nü§ñ MODELOS DE GROK ENCONTRADOS ({len(grok_models)}):")
        for model in grok_models:
            print(f"   ‚Ä¢ {model}")

        print(f"\nüëÅÔ∏è MODELOS CON CAPACIDADES DE VISI√ìN ({len(vision_models)}):")
        for model in vision_models:
            print(f"   ‚Ä¢ {model}")

        # Verificar espec√≠ficamente Grok 4 Fast
        grok_fast_found = any('grok-4-fast' in model.lower() for model in grok_models)
        print(f"\nüéØ GROK 4 FAST: {'‚úÖ ENCONTRADO' if grok_fast_found else '‚ùå NO ENCONTRADO'}")

        # Verificar si tiene visi√≥n
        grok_vision_found = any('grok' in model.lower() and ('vision' in model.lower() or 'beta' in model.lower()) for model in vision_models)
        print(f"üéØ GROK CON VISI√ìN: {'‚úÖ DISPONIBLE' if grok_vision_found else '‚ùå NO DISPONIBLE'}")

        return grok_models, vision_models

    except Exception as e:
        print(f"‚ùå Error consultando modelos: {e}")
        print("\nüí° Posibles causas:")
        print("   ‚Ä¢ API key inv√°lida (pero para listar modelos no deber√≠a importar)")
        print("   ‚Ä¢ Problemas de conexi√≥n")
        print("   ‚Ä¢ OpenRouter API cambi√≥")

        return [], []

def show_grok_models_info():
    """Mostrar informaci√≥n sobre modelos de Grok"""
    print("\n" + "="*60)
    print("üìö INFORMACI√ìN SOBRE MODELOS DE GROK:")
    print("="*60)

    models_info = {
        "x-ai/grok-4-fast:free": {
            "vision": False,
            "costo": "Gratis (limitado)",
            "notas": "Modelo de texto, NO tiene capacidades de visi√≥n"
        },
        "x-ai/grok-4o": {
            "vision": True,
            "costo": "~$0.001 por imagen",
            "notas": "Modelo con capacidades de visi√≥n (recomendado)"
        },
        "x-ai/grok-vision-beta": {
            "vision": True,
            "costo": "~$0.001 por imagen",
            "notas": "Versi√≥n beta con visi√≥n (puede no estar disponible)"
        }
    }

    for model, info in models_info.items():
        vision_icon = "üëÅÔ∏è" if info["vision"] else "üìù"
        print(f"\n{model}:")
        print(f"   {vision_icon} Visi√≥n: {'S√ç' if info['vision'] else 'NO'}")
        print(f"   üí∞ Costo: {info['costo']}")
        print(f"   üìù Notas: {info['notas']}")

def main():
    grok_models, vision_models = check_available_models()
    show_grok_models_info()

    print("\n" + "="*60)
    print("üéØ CONCLUSIONES:")
    print("="*60)

    if any('grok-4-fast' in model.lower() for model in grok_models):
        print("‚úÖ Grok 4 Fast est√° disponible en OpenRouter")
        print("‚ùå PERO: Grok 4 Fast NO tiene capacidades de visi√≥n")
        print("üí° Para reconocimiento facial necesitas un modelo con visi√≥n")
    else:
        print("‚ùå Grok 4 Fast no encontrado en OpenRouter")

    print("\nüîÑ RECOMENDACIONES:")
    print("1Ô∏è‚É£ Para visi√≥n: Usa 'x-ai/grok-4o' o Claude 3 Haiku")
    print("2Ô∏è‚É£ Para texto: Usa 'x-ai/grok-4-fast:free'")
    print("3Ô∏è‚É£ Costo t√≠pico: $0.00025-0.001 por an√°lisis facial")

if __name__ == '__main__':
    main()