"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.6.

For    # Local apps - FORMA CORRECTA Y CONSISTENTE
    'backend.apps.api',  # ← App de usuarios
    'backend.apps.condominio',  # ← Actualizada a ruta completa
    'backend.apps.finances',  # ← Si necesitas otras apps
    'backend.apps.communications',  # ← Nueva app de comunicaciones
    'backend.apps.reservations',  # ← Nueva app de reservas
    'backend.apps.audit',  # ← Módulo de auditoría y bitácora
    'backend.apps.modulo_ia',  # ← Nuevo módulo de seguridad con IA
    'backend.apps.modulo_notificaciones.apps.ModuloNotificacionesConfig',  # ← Nuevo módulo de notificaciones
    'backend.apps.maintenance',  # ← Nuevo módulo de mantenimiento
    # API Documentation
    'drf_spectacular',
]mation on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# Suprimir warnings específicos de librerías externas (mover al inicio para mejor performance)
import warnings
warnings.filterwarnings('ignore', category=UserWarning, module='rest_framework_simplejwt')
warnings.filterwarnings('ignore', category=DeprecationWarning, module='pkg_resources')
warnings.filterwarnings('ignore', category=UserWarning, message='.*pkg_resources.*')
warnings.filterwarnings('ignore', category=DeprecationWarning, message='.*pkg_resources.*')
warnings.filterwarnings('ignore', category=UserWarning, message='.*deprecated.*')
warnings.filterwarnings('ignore', category=DeprecationWarning, message='.*deprecated.*')
warnings.filterwarnings('ignore', category=UserWarning, message='.*oneDNN.*')
warnings.filterwarnings('ignore', category=UserWarning, message='.*sparse_softmax_cross_entropy.*')

# Configurar sys.path solo si es necesario (optimizar imports)
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

#lo que se aumento
from decouple import config
import os


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-change-this-in-production-123456789')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '192.168.0.7',  # ← IP actual de la máquina (Wi-Fi)
    '0.0.0.0',      # ← Para desarrollo
]

# Configuración de CORS para desarrollo
CORS_ALLOW_ALL_ORIGINS = True  # Solo para desarrollo
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React-Vite
    "http://localhost:5173",  # Vite por defecto
    "http://localhost:5174",  # Vite alternativo
    "http://localhost:8080",  # Flutter web
    "http://192.168.0.7:8000", # IP actual de la máquina
    "http://10.0.2.2:8000",   # Android emulator
    "http://192.168.0.1:8000", # Red local común
    "http://127.0.0.1:8000",  # localhost con puerto
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:5173",
    "http://localhost:5174",
    "http://localhost:8080",
    "http://localhost:8000",
    "http://192.168.0.7:8000",  # IP actual de la máquina
]

# Configuración de DRF
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # ← Cambiado para desarrollo
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # ← Agregar JWT
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# Configuración de drf-spectacular
SPECTACULAR_SETTINGS = {
    'TITLE': 'Smart Condominium API',
    'DESCRIPTION': 'API para el sistema de condominio inteligente',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'TAGS': [
        {'name': 'users', 'description': 'Operaciones de usuarios'},
        {'name': 'maintenance', 'description': 'Gestión de mantenimiento'},
        {'name': 'analytics', 'description': 'Reportes y Analítica'},
        {'name': 'reservations', 'description': 'Reservas de áreas comunes'},
        {'name': 'finances', 'description': 'Módulo financiero'},
        {'name': 'communications', 'description': 'Comunicaciones'},
        {'name': 'security', 'description': 'Módulo de seguridad'},
        {'name': 'notifications', 'description': 'Notificaciones'},
    ],
}


# Application definition
AUTH_USER_MODEL = 'users.User'

INSTALLED_APPS = [
     'backend.apps.users',  # ← App de usuarios
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #lo que se aumento
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'corsheaders',
    # Local apps - FORMA CORRECTA Y CONSISTENTE
    'backend.apps.api',  # ← Movida a backend/apps/api
    'backend.apps.condominio',  # ← Actualizada a ruta completa
    'backend.apps.finances',  # ← Si necesitas otras apps
    'backend.apps.communications',  # ← Nueva app de comunicaciones
    'backend.apps.reservations',  # ← Nueva app de reservas
    'backend.apps.audit',  # ← Módulo de auditoría y bitácora
    'backend.apps.modulo_ia',  # ← Nuevo módulo de seguridad con IA
    'backend.apps.modulo_notificaciones.apps.ModuloNotificacionesConfig',  # ← Nuevo módulo de notificaciones
    'backend.apps.maintenance',  # ← Nuevo módulo de mantenimiento
    'backend.apps.analytics',  # ← Nuevo módulo de reportes y analítica
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME', default='Smart_Condominium'),      # <-- nombre de la base de datos
        'USER': config('DB_USER', default='postgres'),       # <-- usuario
        'PASSWORD': config('DB_PASSWORD', default='123456'), # <-- contraseña
        'HOST': config('DB_HOST', default='localhost'),      # <-- host
        'PORT': config('DB_PORT', default='5432'),           # <-- puerto
        'OPTIONS': {
            'client_encoding': 'UTF8',
        },
        'CONN_MAX_AGE': 60,  # Conexiones persistentes
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/La_Paz'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (User uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Configuración de IA (Grok de xAI via OpenRouter)
GROK_API_KEY = config('GROK_API_KEY', default='')
GROK_API_BASE = "https://openrouter.ai/api/v1"

# Asegurar que la API key esté disponible en el entorno del sistema para compatibilidad
import os
if GROK_API_KEY:
    os.environ['GROK_API_KEY'] = GROK_API_KEY

# Configuración de Notificaciones Push (FCM HTTP v1 API)
FCM_PROJECT_ID = config('FCM_PROJECT_ID', default='')
FCM_CREDENTIALS_PATH = config('FCM_CREDENTIALS_PATH', default='')
VAPID_PRIVATE_KEY = config('VAPID_PRIVATE_KEY', default='')
VAPID_CLAIMS_SUB = config('VAPID_CLAIMS_SUB', default='')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuración de Logging para suprimir advertencias innecesarias
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',  # Solo mostrar warnings y errores, no info
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'tensorflow': {
            'handlers': [],
            'level': 'ERROR',  # Solo errores de TensorFlow
            'propagate': False,
        },
        'tf_keras': {
            'handlers': [],
            'level': 'ERROR',  # Solo errores de tf_keras
            'propagate': False,
        },
        'rest_framework_simplejwt': {
            'handlers': [],
            'level': 'ERROR',  # Suprimir warnings de JWT
            'propagate': False,
        },
    },
}

