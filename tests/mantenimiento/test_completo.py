"""
Suite completa de tests: M√≥dulo 7 de Mantenimiento
Ejecutar con: python test_completo.py

Este script ejecuta todos los tests del m√≥dulo de mantenimiento:
- test_solicitudes.py
- test_tareas.py
- test_permisos.py
- test_integracion.py
"""

import subprocess
import sys
import os

def run_test(test_file, test_name):
    """Ejecuta un test individual y retorna resultado"""
    print(f"\n{'='*60}")
    print(f"üöÄ EJECUTANDO: {test_name}")
    print('='*60)

    try:
        # Ejecutar el test
        result = subprocess.run(
            [sys.executable, test_file],
            capture_output=True,
            text=True,
            encoding='utf-8',
            cwd=os.path.dirname(test_file)
        )

        # Mostrar output
        if result.stdout:
            print(result.stdout)

        if result.stderr:
            print("STDERR:", result.stderr)

        # Verificar resultado
        if result.returncode == 0:
            print(f"‚úÖ {test_name} - PAS√ì")
            return True
        else:
            print(f"‚ùå {test_name} - FALL√ì")
            return False

    except Exception as e:
        print(f"üí• Error ejecutando {test_name}: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üß™ SUITE COMPLETA - M√≥dulo 7: Gesti√≥n de Mantenimiento")
    print("=" * 70)
    print("Ejecutando todos los tests del m√≥dulo...")
    print()

    # Definir tests a ejecutar
    tests_dir = os.path.dirname(__file__)
    tests = [
        (os.path.join(tests_dir, "test_solicitudes.py"), "Tests de Solicitudes"),
        (os.path.join(tests_dir, "test_tareas.py"), "Tests de Tareas"),
        (os.path.join(tests_dir, "test_permisos.py"), "Tests de Permisos"),
        (os.path.join(tests_dir, "test_integracion.py"), "Tests de Integraci√≥n"),
    ]

    resultados = []

    # Ejecutar cada test
    for test_file, test_name in tests:
        if os.path.exists(test_file):
            resultado = run_test(test_file, test_name)
            resultados.append(resultado)
        else:
            print(f"‚ö†Ô∏è  Archivo no encontrado: {test_file}")
            resultados.append(False)

    # Resultados finales
    print(f"\n{'='*70}")
    print("üìä RESULTADOS FINALES DE LA SUITE")
    print('='*70)

    exitosos = sum(resultados)
    total = len(resultados)

    print(f"Tests ejecutados: {total}")
    print(f"Tests exitosos: {exitosos}")
    print(f"Tests fallidos: {total - exitosos}")

    print(f"\nDetalle por test:")
    test_names = ["Solicitudes", "Tareas", "Permisos", "Integraci√≥n"]
    for i, (resultado, nombre) in enumerate(zip(resultados, test_names), 1):
        status = "‚úÖ PAS√ì" if resultado else "‚ùå FALL√ì"
        print(f"  {i}. {nombre}: {status}")

    # Evaluaci√≥n final
    print(f"\n{'='*70}")
    if exitosos == total:
        print("üéâ ¬°SUITE COMPLETA EXITOSA!")
        print("‚úÖ Todos los tests del m√≥dulo de mantenimiento pasaron correctamente.")
        print("‚úÖ El m√≥dulo est√° listo para producci√≥n.")
        print("\nüìã Resumen de funcionalidades validadas:")
        print("   ‚Ä¢ ‚úÖ Creaci√≥n de solicitudes de mantenimiento")
        print("   ‚Ä¢ ‚úÖ Asignaci√≥n de tareas a personal calificado")
        print("   ‚Ä¢ ‚úÖ Seguimiento de estados y progreso")
        print("   ‚Ä¢ ‚úÖ Sistema de permisos por roles")
        print("   ‚Ä¢ ‚úÖ Filtros y b√∫squeda avanzada")
        print("   ‚Ä¢ ‚úÖ Integraci√≥n completa entre componentes")
        return True

    elif exitosos >= total * 0.8:  # 80% de √©xito
        print("‚ö†Ô∏è  SUITE MAYORITARIAMENTE EXITOSA")
        print(f"‚úÖ {exitosos}/{total} tests pasaron ({exitosos/total*100:.1f}%)")
        print("El m√≥dulo es funcional pero requiere atenci√≥n en algunos tests.")
        return False

    else:
        print("‚ùå SUITE FALLIDA")
        print(f"‚ùå Solo {exitosos}/{total} tests pasaron ({exitosos/total*100:.1f}%)")
        print("El m√≥dulo requiere correcciones importantes antes de producci√≥n.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
